# Function and Method Documentation Templates by Language

## Python

```python
def function_name(param1, param2, optional_param=None):
    """
    [Function intent]
    Describe the detailed purpose of this function and its role in the system.
    
    [Implementation details]
    Explain key implementation aspects and technical details of how this function works.
    
    [Design principles]
    List design principles, patterns, and approaches used in this function.
    
    Args:
        param1 (type): Description of parameter
        param2 (type): Description of parameter
        optional_param (type, optional): Description of optional parameter. Defaults to None.
        
    Returns:
        type: Description of return value
        
    Raises:
        ExceptionType: When exception occurs
    """
    # Implementation...
```

## JavaScript

```javascript
/**
 * [Function intent]
 * Describe the detailed purpose of this function and its role in the system.
 *
 * [Implementation details]
 * Explain key implementation aspects and technical details of how this function works.
 *
 * [Design principles]
 * List design principles, patterns, and approaches used in this function.
 *
 * @param {Type} param1 - Description of parameter
 * @param {Type} param2 - Description of parameter
 * @param {Type} [optionalParam=defaultValue] - Description of optional parameter
 * @returns {Type} Description of return value
 * @throws {ErrorType} When error occurs
 */
function functionName(param1, param2, optionalParam) {
    // Implementation...
}
```

## Java

```java
/**
 * [Method intent]
 * Describe the detailed purpose of this method and its role in the system.
 *
 * [Implementation details]
 * Explain key implementation aspects and technical details of how this method works.
 *
 * [Design principles]
 * List design principles, patterns, and approaches used in this method.
 *
 * @param param1 Description of parameter
 * @param param2 Description of parameter
 * @return Description of return value
 * @throws ExceptionType When exception occurs
 */
public ReturnType methodName(ParamType param1, ParamType param2) {
    // Implementation...
}
```

## C#

```csharp
/// <summary>
/// [Method intent]
/// Describe the detailed purpose of this method and its role in the system.
/// </summary>
/// 
/// <remarks>
/// [Implementation details]
/// Explain key implementation aspects and technical details of how this method works.
/// 
/// [Design principles]
/// List design principles, patterns, and approaches used in this method.
/// </remarks>
/// 
/// <param name="param1">Description of parameter</param>
/// <param name="param2">Description of parameter</param>
/// <returns>Description of return value</returns>
/// <exception cref="ExceptionType">When exception occurs</exception>
public ReturnType MethodName(ParamType param1, ParamType param2)
{
    // Implementation...
}
```

## TypeScript

```typescript
/**
 * [Function intent]
 * Describe the detailed purpose of this function and its role in the system.
 *
 * [Implementation details]
 * Explain key implementation aspects and technical details of how this function works.
 *
 * [Design principles]
 * List design principles, patterns, and approaches used in this function.
 *
 * @param param1 - Description of parameter
 * @param param2 - Description of parameter
 * @param [optionalParam] - Description of optional parameter
 * @returns Description of return value
 * @throws Error when condition occurs
 */
function functionName(
    param1: Type, 
    param2: Type, 
    optionalParam?: Type
): ReturnType {
    // Implementation...
}
```

## Class Documentation Templates

### Python Class

```python
class ClassName:
    """
    [Class intent]
    Describe the detailed purpose of this class and its role in the system.
    
    [Implementation details]
    Explain key implementation aspects and technical details of how this class works.
    
    [Design principles]
    List design principles, patterns, and approaches used in this class.
    
    Attributes:
        attr1 (type): Description of attribute
        attr2 (type): Description of attribute
    """
    
    def __init__(self, param1, param2):
        """
        [Class method intent]
        Initialize a new instance of ClassName.
        
        [Implementation details]
        Describe specific initialization steps and state management.
        
        [Design principles]
        List design principles for initialization.
        
        Args:
            param1 (type): Description of parameter
            param2 (type): Description of parameter
        """
        # Implementation...
```

### JavaScript/TypeScript Class

```typescript
/**
 * [Class intent]
 * Describe the detailed purpose of this class and its role in the system.
 *
 * [Implementation details]
 * Explain key implementation aspects and technical details of how this class works.
 *
 * [Design principles]
 * List design principles, patterns, and approaches used in this class.
 */
class ClassName {
    /**
     * [Class method intent]
     * Initialize a new instance of ClassName.
     *
     * [Implementation details]
     * Describe specific initialization steps and state management.
     *
     * [Design principles]
     * List design principles for initialization.
     *
     * @param param1 - Description of parameter
     * @param param2 - Description of parameter
     */
    constructor(param1: Type, param2: Type) {
        // Implementation...
    }
}
```

## Important Documentation Rules

1. ALL functions, methods, and classes MUST include the three-section documentation pattern:
   - [Function/Class method/Class intent]
   - [Implementation details]
   - [Design principles]

2. These sections MUST appear in the exact order shown above.

3. Documentation MUST be complete regardless of function/method size or complexity.

4. Parameter, return value, and exception documentation should follow language-specific conventions.

5. Markdown files are exempt from this documentation requirement.
