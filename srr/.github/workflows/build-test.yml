# Workflow GitHub Actions pour le build et les tests du projet SRR
# Ce workflow est déclenché sur les pull requests et les push vers les branches principales

name: Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-lint-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: srr_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          cd services/backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov flake8 black
          
      - name: Lint with flake8
        run: |
          cd services/backend
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics
          
      - name: Check formatting with black
        run: |
          cd services/backend
          black --check .
          
      - name: Run unit tests
        run: |
          cd services/backend
          pytest tests/services -v --cov=app --cov-report=xml
          
      - name: Run integration tests
        run: |
          cd services/backend
          pytest tests/api -v --cov=app --cov-append --cov-report=xml
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./services/backend/coverage.xml
          flags: backend
          fail_ci_if_error: false

  frontend-lint-test:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: |
          cd services/frontend
          npm ci
          
      - name: Lint with ESLint
        run: |
          cd services/frontend
          npm run lint
          
      - name: Check formatting with Prettier
        run: |
          cd services/frontend
          npm run format:check
          
      - name: Run unit tests
        run: |
          cd services/frontend
          npm test -- --coverage --watchAll=false
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./services/frontend/coverage/coverage-final.json
          flags: frontend
          fail_ci_if_error: false
          
      - name: Build frontend
        run: |
          cd services/frontend
          npm run build

  docker-build:
    needs: [backend-lint-test, frontend-lint-test]
    runs-on: ubuntu-latest
    if: success() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./services/backend
          push: true
          tags: ghcr.io/${{ github.repository }}/backend:${{ github.sha }},ghcr.io/${{ github.repository }}/backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./services/frontend
          push: true
          tags: ghcr.io/${{ github.repository }}/frontend:${{ github.sha }},ghcr.io/${{ github.repository }}/frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Build and push mocks image
        uses: docker/build-push-action@v4
        with:
          context: ./services/mocks
          push: true
          tags: ghcr.io/${{ github.repository }}/mocks:${{ github.sha }},ghcr.io/${{ github.repository }}/mocks:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
