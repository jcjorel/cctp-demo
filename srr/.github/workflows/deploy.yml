# Workflow GitHub Actions pour le déploiement du projet SRR
# Ce workflow est déclenché après un build réussi sur les branches principales

name: Deploy

on:
  workflow_run:
    workflows: ["Build and Test"]
    branches: [main, develop]
    types:
      - completed

jobs:
  deploy-dev:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'develop' }}
    environment: development
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Install AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-3
      
      - name: Deploy to development
        run: |
          aws ecs update-service --cluster srr-dev-cluster --service srr-dev-backend --force-new-deployment
          aws ecs update-service --cluster srr-dev-cluster --service srr-dev-frontend --force-new-deployment
          echo "Waiting for services to stabilize..."
          aws ecs wait services-stable --cluster srr-dev-cluster --services srr-dev-backend srr-dev-frontend
          
      - name: Run E2E tests
        run: |
          cd services/frontend
          npm ci
          npm run test:e2e -- --config baseUrl=https://dev.srr.example.com
          
      - name: Post deployment notification
        if: always()
        run: |
          DEPLOY_STATUS="${{ job.status }}"
          if [ "$DEPLOY_STATUS" == "success" ]; then
            echo "✅ Déploiement en développement réussi: https://dev.srr.example.com"
          else
            echo "❌ Échec du déploiement en développement"
          fi

  deploy-staging:
    runs-on: ubuntu-latest
    needs: deploy-dev
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main' }}
    environment: staging
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Install AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-3
      
      - name: Deploy to staging
        run: |
          aws ecs update-service --cluster srr-staging-cluster --service srr-staging-backend --force-new-deployment
          aws ecs update-service --cluster srr-staging-cluster --service srr-staging-frontend --force-new-deployment
          echo "Waiting for services to stabilize..."
          aws ecs wait services-stable --cluster srr-staging-cluster --services srr-staging-backend srr-staging-frontend
          
      - name: Run E2E tests
        run: |
          cd services/frontend
          npm ci
          npm run test:e2e -- --config baseUrl=https://staging.srr.example.com
          
      - name: Post deployment notification
        if: always()
        run: |
          DEPLOY_STATUS="${{ job.status }}"
          if [ "$DEPLOY_STATUS" == "success" ]; then
            echo "✅ Déploiement en recette réussi: https://staging.srr.example.com"
          else
            echo "❌ Échec du déploiement en recette"
          fi

  deploy-prod:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main' }}
    environment:
      name: production
      url: https://srr.example.com
    
    # Déploiement manuel requis pour la production
    # Utilise les approbations d'environnement GitHub
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Install AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-3
      
      - name: Deploy to production
        run: |
          aws ecs update-service --cluster srr-prod-cluster --service srr-prod-backend --force-new-deployment
          aws ecs update-service --cluster srr-prod-cluster --service srr-prod-frontend --force-new-deployment
          echo "Waiting for services to stabilize..."
          aws ecs wait services-stable --cluster srr-prod-cluster --services srr-prod-backend srr-prod-frontend
          
      - name: Verify production deployment
        run: |
          # Attendre que le service soit complètement déployé
          sleep 60
          
          # Vérifier que le service répond
          curl -sSf https://srr.example.com/api/v1/health || exit 1
          echo "Production deployment verified successfully!"
          
      - name: Create deployment tag
        run: |
          DEPLOY_DATE=$(date +"%Y%m%d%H%M%S")
          git tag -a "prod-${DEPLOY_DATE}" -m "Production deployment on $(date)"
          git push origin "prod-${DEPLOY_DATE}"
          
      - name: Post deployment notification
        if: always()
        run: |
          DEPLOY_STATUS="${{ job.status }}"
          if [ "$DEPLOY_STATUS" == "success" ]; then
            echo "✅ Déploiement en production réussi: https://srr.example.com"
          else
            echo "❌ Échec du déploiement en production"
          fi
